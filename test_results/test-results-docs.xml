<?xml version="1.0" encoding="utf-8"?><testsuites><testsuite errors="0" failures="3" hostname="PC81978" name="pytest" skipped="3" tests="155" time="39.020" timestamp="2021-07-22T10:29:44.143274"><testcase classname="tests.test_platform" file="tests\test_platform.py" line="5" name="test_64bit" time="0.002" /><testcase classname="tests.test_platform" file="tests\test_platform.py" line="10" name="test_python_version" time="0.001" /><testcase classname="tests.application.test_dashboard" file="tests\application\test_dashboard.py" line="5" name="test_constructor" time="0.047" /><testcase classname="tests.application.test_pandas_profiling_app" file="tests\application\test_pandas_profiling_app.py" line="29" name="test_can_be_constructed" time="0.079" /><testcase classname="tests.application.test_pandas_profiling_app" file="tests\application\test_pandas_profiling_app.py" line="36" name="test_has_csv_url" time="0.045" /><testcase classname="tests.application.test_pandas_profiling_app" file="tests\application\test_pandas_profiling_app.py" line="41" name="test_can_configure" time="0.045" /><testcase classname="tests.application.test_pandas_profiling_app" file="tests\application\test_pandas_profiling_app.py" line="45" name="test_can_be_viewed" time="0.048" /><testcase classname="tests.application.test_pandas_profiling_app" file="tests\application\test_pandas_profiling_app.py" line="49" name="test_can_load_data_from_url" time="0.000"><skipped message="slow" type="pytest.skip">c:\repos\private\awesome-panel\tests\application\test_pandas_profiling_app.py:50: slow</skipped></testcase><testcase classname="tests.application.test_pandas_profiling_app" file="tests\application\test_pandas_profiling_app.py" line="62" name="test_can_load_random_report" time="0.000"><skipped message="slow" type="pytest.skip">c:\repos\private\awesome-panel\tests\application\test_pandas_profiling_app.py:63: slow</skipped></testcase><testcase classname="tests.application.detr.test_detr" file="tests\application\detr\test_detr.py" line="5" name="test_constructor" time="23.802" /><testcase classname="tests.application.detr.test_detr" file="tests\application\detr\test_detr.py" line="9" name="test_can_update_url" time="3.281" /><testcase classname="tests.application.detr.test_detr" file="tests\application\detr\test_detr.py" line="20" name="test_can_run_detr" time="1.213" /><testcase classname="tests.package.test_core_services" file="tests\package\test_core_services.py" line="6" name="test_module_to_github_url" time="0.002" /><testcase classname="tests.package.pages.test_gallery" file="tests\package\pages\test_gallery.py" line="14" name="test_gallery" time="0.002"><failure message="AttributeError: module 'application.pages.gallery.gallery' has no attribute 'Gallery'">@pytest.mark.panel
    def test_gallery():
        """Test that we can see the gallery page"""
        page_outlet = Column(sizing_mode="stretch_width")
&gt;       page = gallery.Gallery(
            page_outlet=page_outlet,
            apps_in_gallery=APPS_IN_GALLERY,
        ).view()
E       AttributeError: module 'application.pages.gallery.gallery' has no attribute 'Gallery'

tests\package\pages\test_gallery.py:19: AttributeError</failure></testcase><testcase classname="tests.package.pages.test_gallery_button" file="tests\package\pages\test_gallery_button.py" line="11" name="test_gallery_button" time="0.000"><skipped message="" type="pytest.xfail" /></testcase><testcase classname="tests.package.pages.test_pages" file="tests\package\pages\test_pages.py" line="10" name="test_home" time="0.057" /><testcase classname="tests.package.pages.test_pages" file="tests\package\pages\test_pages.py" line="19" name="test_resources" time="0.054" /><testcase classname="tests.package.pages.test_yahooquery_app" file="tests\package\pages\test_yahooquery_app.py" line="5" name="test_base__page__data_balance_sheet_quarterly" time="0.132"><failure message="requests.exceptions.SSLError: HTTPSConnectionPool(host='query2.finance.yahoo.com', port=443): Max retries exceeded with url: /v10/finance/quoteSummary/ORSTED.CO?modules=balanceSheetHistoryQuarterly (Caused by SSLError(SSLCertVerificationError(1, '[SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: self signed certificate in certificate chain (_ssl.c:1076)')))">self = &lt;urllib3.connectionpool.HTTPSConnectionPool object at 0x0000019F261FA688&gt;
method = 'GET'
url = '/v10/finance/quoteSummary/ORSTED.CO?modules=balanceSheetHistoryQuarterly'
body = None
headers = {'User-Agent': 'python-requests/2.24.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}
retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)
redirect = False, assert_same_host = False
timeout = Timeout(connect=None, read=None, total=None), pool_timeout = None
release_conn = False, chunked = False, body_pos = None
response_kw = {'decode_content': False, 'preload_content': False}, conn = None
release_this_conn = True, err = None, clean_exit = False
timeout_obj = Timeout(connect=None, read=None, total=None)
is_new_proxy_conn = False

    def urlopen(
        self,
        method,
        url,
        body=None,
        headers=None,
        retries=None,
        redirect=True,
        assert_same_host=True,
        timeout=_Default,
        pool_timeout=None,
        release_conn=None,
        chunked=False,
        body_pos=None,
        **response_kw
    ):
        """
        Get a connection from the pool and perform an HTTP request. This is the
        lowest level call for making a request, so you'll need to specify all
        the raw details.
    
        .. note::
    
           More commonly, it's appropriate to use a convenience method provided
           by :class:`.RequestMethods`, such as :meth:`request`.
    
        .. note::
    
           `release_conn` will only behave as expected if
           `preload_content=False` because we want to make
           `preload_content=False` the default behaviour someday soon without
           breaking backwards compatibility.
    
        :param method:
            HTTP request method (such as GET, POST, PUT, etc.)
    
        :param body:
            Data to send in the request body (useful for creating
            POST requests, see HTTPConnectionPool.post_url for
            more convenience).
    
        :param headers:
            Dictionary of custom headers to send, such as User-Agent,
            If-None-Match, etc. If None, pool headers are used. If provided,
            these headers completely replace any pool-specific headers.
    
        :param retries:
            Configure the number of retries to allow before raising a
            :class:`~urllib3.exceptions.MaxRetryError` exception.
    
            Pass ``None`` to retry until you receive a response. Pass a
            :class:`~urllib3.util.retry.Retry` object for fine-grained control
            over different types of retries.
            Pass an integer number to retry connection errors that many times,
            but no other types of errors. Pass zero to never retry.
    
            If ``False``, then retries are disabled and any exception is raised
            immediately. Also, instead of raising a MaxRetryError on redirects,
            the redirect response will be returned.
    
        :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.
    
        :param redirect:
            If True, automatically handle redirects (status codes 301, 302,
            303, 307, 308). Each redirect counts as a retry. Disabling retries
            will disable redirect, too.
    
        :param assert_same_host:
            If ``True``, will make sure that the host of the pool requests is
            consistent else will raise HostChangedError. When False, you can
            use the pool on an HTTP proxy and request foreign hosts.
    
        :param timeout:
            If specified, overrides the default timeout for this one
            request. It may be a float (in seconds) or an instance of
            :class:`urllib3.util.Timeout`.
    
        :param pool_timeout:
            If set and the pool is set to block=True, then this method will
            block for ``pool_timeout`` seconds and raise EmptyPoolError if no
            connection is available within the time period.
    
        :param release_conn:
            If False, then the urlopen call will not release the connection
            back into the pool once a response is received (but will release if
            you read the entire contents of the response such as when
            `preload_content=True`). This is useful if you're not preloading
            the response's content immediately. You will need to call
            ``r.release_conn()`` on the response ``r`` to return the connection
            back into the pool. If None, it takes the value of
            ``response_kw.get('preload_content', True)``.
    
        :param chunked:
            If True, urllib3 will send the body using chunked transfer
            encoding. Otherwise, urllib3 will send the body using the standard
            content-length form. Defaults to False.
    
        :param int body_pos:
            Position to seek to in file-like body in the event of a retry or
            redirect. Typically this won't need to be set because urllib3 will
            auto-populate the value when needed.
    
        :param \\**response_kw:
            Additional parameters are passed to
            :meth:`urllib3.response.HTTPResponse.from_httplib`
        """
        if headers is None:
            headers = self.headers
    
        if not isinstance(retries, Retry):
            retries = Retry.from_int(retries, redirect=redirect, default=self.retries)
    
        if release_conn is None:
            release_conn = response_kw.get("preload_content", True)
    
        # Check host
        if assert_same_host and not self.is_same_host(url):
            raise HostChangedError(self, url, retries)
    
        # Ensure that the URL we're connecting to is properly encoded
        if url.startswith("/"):
            url = six.ensure_str(_encode_target(url))
        else:
            url = six.ensure_str(parse_url(url).url)
    
        conn = None
    
        # Track whether `conn` needs to be released before
        # returning/raising/recursing. Update this variable if necessary, and
        # leave `release_conn` constant throughout the function. That way, if
        # the function recurses, the original value of `release_conn` will be
        # passed down into the recursive call, and its value will be respected.
        #
        # See issue #651 [1] for details.
        #
        # [1] &lt;https://github.com/urllib3/urllib3/issues/651&gt;
        release_this_conn = release_conn
    
        # Merge the proxy headers. Only do this in HTTP. We have to copy the
        # headers dict so we can safely change it without those changes being
        # reflected in anyone else's copy.
        if self.scheme == "http":
            headers = headers.copy()
            headers.update(self.proxy_headers)
    
        # Must keep the exception bound to a separate variable or else Python 3
        # complains about UnboundLocalError.
        err = None
    
        # Keep track of whether we cleanly exited the except block. This
        # ensures we do proper cleanup in finally.
        clean_exit = False
    
        # Rewind body position, if needed. Record current position
        # for future rewinds in the event of a redirect/retry.
        body_pos = set_file_position(body, body_pos)
    
        try:
            # Request a connection from the queue.
            timeout_obj = self._get_timeout(timeout)
            conn = self._get_conn(timeout=pool_timeout)
    
            conn.timeout = timeout_obj.connect_timeout
    
            is_new_proxy_conn = self.proxy is not None and not getattr(
                conn, "sock", None
            )
            if is_new_proxy_conn:
                self._prepare_proxy(conn)
    
            # Make the request on the httplib connection object.
            httplib_response = self._make_request(
                conn,
                method,
                url,
                timeout=timeout_obj,
                body=body,
                headers=headers,
&gt;               chunked=chunked,
            )

.venv\lib\site-packages\urllib3\connectionpool.py:677: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;urllib3.connectionpool.HTTPSConnectionPool object at 0x0000019F261FA688&gt;
conn = &lt;urllib3.connection.HTTPSConnection object at 0x0000019F26E2A688&gt;
method = 'GET'
url = '/v10/finance/quoteSummary/ORSTED.CO?modules=balanceSheetHistoryQuarterly'
timeout = Timeout(connect=None, read=None, total=None), chunked = False
httplib_request_kw = {'body': None, 'headers': {'User-Agent': 'python-requests/2.24.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}}
timeout_obj = Timeout(connect=None, read=None, total=None)

    def _make_request(
        self, conn, method, url, timeout=_Default, chunked=False, **httplib_request_kw
    ):
        """
        Perform a request on a given urllib connection object taken from our
        pool.
    
        :param conn:
            a connection from one of our connection pools
    
        :param timeout:
            Socket timeout in seconds for the request. This can be a
            float or integer, which will set the same timeout value for
            the socket connect and the socket read, or an instance of
            :class:`urllib3.util.Timeout`, which gives you more fine-grained
            control over your timeouts.
        """
        self.num_requests += 1
    
        timeout_obj = self._get_timeout(timeout)
        timeout_obj.start_connect()
        conn.timeout = timeout_obj.connect_timeout
    
        # Trigger any extra validation we need to do.
        try:
&gt;           self._validate_conn(conn)

.venv\lib\site-packages\urllib3\connectionpool.py:381: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;urllib3.connectionpool.HTTPSConnectionPool object at 0x0000019F261FA688&gt;
conn = &lt;urllib3.connection.HTTPSConnection object at 0x0000019F26E2A688&gt;

    def _validate_conn(self, conn):
        """
        Called right before a request is made, after the socket is created.
        """
        super(HTTPSConnectionPool, self)._validate_conn(conn)
    
        # Force connect early to allow us to validate the connection.
        if not getattr(conn, "sock", None):  # AppEngine might not have  `.sock`
&gt;           conn.connect()

.venv\lib\site-packages\urllib3\connectionpool.py:976: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;urllib3.connection.HTTPSConnection object at 0x0000019F26E2A688&gt;

    def connect(self):
        # Add certificate verification
        conn = self._new_conn()
        hostname = self.host
    
        # Google App Engine's httplib does not define _tunnel_host
        if getattr(self, "_tunnel_host", None):
            self.sock = conn
            # Calls self._set_hostport(), so self.host is
            # self._tunnel_host below.
            self._tunnel()
            # Mark this connection as not reusable
            self.auto_open = 0
    
            # Override the host with the one we're requesting data from.
            hostname = self._tunnel_host
    
        server_hostname = hostname
        if self.server_hostname is not None:
            server_hostname = self.server_hostname
    
        is_time_off = datetime.date.today() &lt; RECENT_DATE
        if is_time_off:
            warnings.warn(
                (
                    "System time is way off (before {0}). This will probably "
                    "lead to SSL verification errors"
                ).format(RECENT_DATE),
                SystemTimeWarning,
            )
    
        # Wrap socket using verification with the root certs in
        # trusted_root_certs
        default_ssl_context = False
        if self.ssl_context is None:
            default_ssl_context = True
            self.ssl_context = create_urllib3_context(
                ssl_version=resolve_ssl_version(self.ssl_version),
                cert_reqs=resolve_cert_reqs(self.cert_reqs),
            )
    
        context = self.ssl_context
        context.verify_mode = resolve_cert_reqs(self.cert_reqs)
    
        # Try to load OS default certs if none are given.
        # Works well on Windows (requires Python3.4+)
        if (
            not self.ca_certs
            and not self.ca_cert_dir
            and not self.ca_cert_data
            and default_ssl_context
            and hasattr(context, "load_default_certs")
        ):
            context.load_default_certs()
    
        self.sock = ssl_wrap_socket(
            sock=conn,
            keyfile=self.key_file,
            certfile=self.cert_file,
            key_password=self.key_password,
            ca_certs=self.ca_certs,
            ca_cert_dir=self.ca_cert_dir,
            ca_cert_data=self.ca_cert_data,
            server_hostname=server_hostname,
&gt;           ssl_context=context,
        )

.venv\lib\site-packages\urllib3\connection.py:370: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

sock = &lt;socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=0&gt;
keyfile = None, certfile = None, cert_reqs = None
ca_certs = 'c:\\repos\\private\\awesome-panel\\.venv\\lib\\site-packages\\certifi\\cacert.pem'
server_hostname = 'query2.finance.yahoo.com', ssl_version = None, ciphers = None
ssl_context = &lt;ssl.SSLContext object at 0x0000019F25F769E8&gt;, ca_cert_dir = None
key_password = None, ca_cert_data = None

    def ssl_wrap_socket(
        sock,
        keyfile=None,
        certfile=None,
        cert_reqs=None,
        ca_certs=None,
        server_hostname=None,
        ssl_version=None,
        ciphers=None,
        ssl_context=None,
        ca_cert_dir=None,
        key_password=None,
        ca_cert_data=None,
    ):
        """
        All arguments except for server_hostname, ssl_context, and ca_cert_dir have
        the same meaning as they do when using :func:`ssl.wrap_socket`.
    
        :param server_hostname:
            When SNI is supported, the expected hostname of the certificate
        :param ssl_context:
            A pre-made :class:`SSLContext` object. If none is provided, one will
            be created using :func:`create_urllib3_context`.
        :param ciphers:
            A string of ciphers we wish the client to support.
        :param ca_cert_dir:
            A directory containing CA certificates in multiple separate files, as
            supported by OpenSSL's -CApath flag or the capath argument to
            SSLContext.load_verify_locations().
        :param key_password:
            Optional password if the keyfile is encrypted.
        :param ca_cert_data:
            Optional string containing CA certificates in PEM format suitable for
            passing as the cadata parameter to SSLContext.load_verify_locations()
        """
        context = ssl_context
        if context is None:
            # Note: This branch of code and all the variables in it are no longer
            # used by urllib3 itself. We should consider deprecating and removing
            # this code.
            context = create_urllib3_context(ssl_version, cert_reqs, ciphers=ciphers)
    
        if ca_certs or ca_cert_dir or ca_cert_data:
            try:
                context.load_verify_locations(ca_certs, ca_cert_dir, ca_cert_data)
            except IOError as e:  # Platform-specific: Python 2.7
                raise SSLError(e)
            # Py33 raises FileNotFoundError which subclasses OSError
            # These are not equivalent unless we check the errno attribute
            except OSError as e:  # Platform-specific: Python 3.3 and beyond
                if e.errno == errno.ENOENT:
                    raise SSLError(e)
                raise
    
        elif ssl_context is None and hasattr(context, "load_default_certs"):
            # try to load OS default certs; works well on Windows (require Python3.4+)
            context.load_default_certs()
    
        # Attempt to detect if we get the goofy behavior of the
        # keyfile being encrypted and OpenSSL asking for the
        # passphrase via the terminal and instead error out.
        if keyfile and key_password is None and _is_key_file_encrypted(keyfile):
            raise SSLError("Client private key is encrypted, password is required")
    
        if certfile:
            if key_password is None:
                context.load_cert_chain(certfile, keyfile)
            else:
                context.load_cert_chain(certfile, keyfile, key_password)
    
        # If we detect server_hostname is an IP address then the SNI
        # extension should not be used according to RFC3546 Section 3.1
        # We shouldn't warn the user if SNI isn't available but we would
        # not be using SNI anyways due to IP address for server_hostname.
        if (
            server_hostname is not None and not is_ipaddress(server_hostname)
        ) or IS_SECURETRANSPORT:
            if HAS_SNI and server_hostname is not None:
&gt;               return context.wrap_socket(sock, server_hostname=server_hostname)

.venv\lib\site-packages\urllib3\util\ssl_.py:377: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;ssl.SSLContext object at 0x0000019F25F769E8&gt;
sock = &lt;socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=0&gt;
server_side = False, do_handshake_on_connect = True, suppress_ragged_eofs = True
server_hostname = 'query2.finance.yahoo.com', session = None

    def wrap_socket(self, sock, server_side=False,
                    do_handshake_on_connect=True,
                    suppress_ragged_eofs=True,
                    server_hostname=None, session=None):
        # SSLSocket class handles server_hostname encoding before it calls
        # ctx._wrap_socket()
        return self.sslsocket_class._create(
            sock=sock,
            server_side=server_side,
            do_handshake_on_connect=do_handshake_on_connect,
            suppress_ragged_eofs=suppress_ragged_eofs,
            server_hostname=server_hostname,
            context=self,
&gt;           session=session
        )

C:\program files\python37\lib\ssl.py:423: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

cls = &lt;class 'ssl.SSLSocket'&gt;
sock = &lt;socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=0&gt;
server_side = False, do_handshake_on_connect = True, suppress_ragged_eofs = True
server_hostname = 'query2.finance.yahoo.com'
context = &lt;ssl.SSLContext object at 0x0000019F25F769E8&gt;, session = None

    @classmethod
    def _create(cls, sock, server_side=False, do_handshake_on_connect=True,
                suppress_ragged_eofs=True, server_hostname=None,
                context=None, session=None):
        if sock.getsockopt(SOL_SOCKET, SO_TYPE) != SOCK_STREAM:
            raise NotImplementedError("only stream sockets are supported")
        if server_side:
            if server_hostname:
                raise ValueError("server_hostname can only be specified "
                                 "in client mode")
            if session is not None:
                raise ValueError("session can only be specified in "
                                 "client mode")
        if context.check_hostname and not server_hostname:
            raise ValueError("check_hostname requires server_hostname")
    
        kwargs = dict(
            family=sock.family, type=sock.type, proto=sock.proto,
            fileno=sock.fileno()
        )
        self = cls.__new__(cls, **kwargs)
        super(SSLSocket, self).__init__(**kwargs)
        self.settimeout(sock.gettimeout())
        sock.detach()
    
        self._context = context
        self._session = session
        self._closed = False
        self._sslobj = None
        self.server_side = server_side
        self.server_hostname = context._encode_hostname(server_hostname)
        self.do_handshake_on_connect = do_handshake_on_connect
        self.suppress_ragged_eofs = suppress_ragged_eofs
    
        # See if we are connected
        try:
            self.getpeername()
        except OSError as e:
            if e.errno != errno.ENOTCONN:
                raise
            connected = False
        else:
            connected = True
    
        self._connected = connected
        if connected:
            # create the SSL object
            try:
                self._sslobj = self._context._wrap_socket(
                    self, server_side, self.server_hostname,
                    owner=self, session=self._session,
                )
                if do_handshake_on_connect:
                    timeout = self.gettimeout()
                    if timeout == 0.0:
                        # non-blocking
                        raise ValueError("do_handshake_on_connect should not be specified for non-blocking sockets")
&gt;                   self.do_handshake()

C:\program files\python37\lib\ssl.py:870: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=0&gt;
block = False

    @_sslcopydoc
    def do_handshake(self, block=False):
        self._check_connected()
        timeout = self.gettimeout()
        try:
            if timeout == 0.0 and block:
                self.settimeout(None)
&gt;           self._sslobj.do_handshake()
E           ssl.SSLCertVerificationError: [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: self signed certificate in certificate chain (_ssl.c:1076)

C:\program files\python37\lib\ssl.py:1139: SSLCertVerificationError

During handling of the above exception, another exception occurred:

self = &lt;requests.adapters.HTTPAdapter object at 0x0000019F1E0E3708&gt;
request = &lt;PreparedRequest [GET]&gt;, stream = False
timeout = Timeout(connect=None, read=None, total=None), verify = True
cert = None, proxies = OrderedDict()

    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):
        """Sends PreparedRequest object. Returns Response object.
    
        :param request: The :class:`PreparedRequest &lt;PreparedRequest&gt;` being sent.
        :param stream: (optional) Whether to stream the request content.
        :param timeout: (optional) How long to wait for the server to send
            data before giving up, as a float, or a :ref:`(connect timeout,
            read timeout) &lt;timeouts&gt;` tuple.
        :type timeout: float or tuple or urllib3 Timeout object
        :param verify: (optional) Either a boolean, in which case it controls whether
            we verify the server's TLS certificate, or a string, in which case it
            must be a path to a CA bundle to use
        :param cert: (optional) Any user-provided SSL certificate to be trusted.
        :param proxies: (optional) The proxies dictionary to apply to the request.
        :rtype: requests.Response
        """
    
        try:
            conn = self.get_connection(request.url, proxies)
        except LocationValueError as e:
            raise InvalidURL(e, request=request)
    
        self.cert_verify(conn, request.url, verify, cert)
        url = self.request_url(request, proxies)
        self.add_headers(request, stream=stream, timeout=timeout, verify=verify, cert=cert, proxies=proxies)
    
        chunked = not (request.body is None or 'Content-Length' in request.headers)
    
        if isinstance(timeout, tuple):
            try:
                connect, read = timeout
                timeout = TimeoutSauce(connect=connect, read=read)
            except ValueError as e:
                # this may raise a string formatting error.
                err = ("Invalid timeout {}. Pass a (connect, read) "
                       "timeout tuple, or a single float to set "
                       "both timeouts to the same value".format(timeout))
                raise ValueError(err)
        elif isinstance(timeout, TimeoutSauce):
            pass
        else:
            timeout = TimeoutSauce(connect=timeout, read=timeout)
    
        try:
            if not chunked:
                resp = conn.urlopen(
                    method=request.method,
                    url=url,
                    body=request.body,
                    headers=request.headers,
                    redirect=False,
                    assert_same_host=False,
                    preload_content=False,
                    decode_content=False,
                    retries=self.max_retries,
&gt;                   timeout=timeout
                )

.venv\lib\site-packages\requests\adapters.py:449: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;urllib3.connectionpool.HTTPSConnectionPool object at 0x0000019F261FA688&gt;
method = 'GET'
url = '/v10/finance/quoteSummary/ORSTED.CO?modules=balanceSheetHistoryQuarterly'
body = None
headers = {'User-Agent': 'python-requests/2.24.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}
retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)
redirect = False, assert_same_host = False
timeout = Timeout(connect=None, read=None, total=None), pool_timeout = None
release_conn = False, chunked = False, body_pos = None
response_kw = {'decode_content': False, 'preload_content': False}, conn = None
release_this_conn = True, err = None, clean_exit = False
timeout_obj = Timeout(connect=None, read=None, total=None)
is_new_proxy_conn = False

    def urlopen(
        self,
        method,
        url,
        body=None,
        headers=None,
        retries=None,
        redirect=True,
        assert_same_host=True,
        timeout=_Default,
        pool_timeout=None,
        release_conn=None,
        chunked=False,
        body_pos=None,
        **response_kw
    ):
        """
        Get a connection from the pool and perform an HTTP request. This is the
        lowest level call for making a request, so you'll need to specify all
        the raw details.
    
        .. note::
    
           More commonly, it's appropriate to use a convenience method provided
           by :class:`.RequestMethods`, such as :meth:`request`.
    
        .. note::
    
           `release_conn` will only behave as expected if
           `preload_content=False` because we want to make
           `preload_content=False` the default behaviour someday soon without
           breaking backwards compatibility.
    
        :param method:
            HTTP request method (such as GET, POST, PUT, etc.)
    
        :param body:
            Data to send in the request body (useful for creating
            POST requests, see HTTPConnectionPool.post_url for
            more convenience).
    
        :param headers:
            Dictionary of custom headers to send, such as User-Agent,
            If-None-Match, etc. If None, pool headers are used. If provided,
            these headers completely replace any pool-specific headers.
    
        :param retries:
            Configure the number of retries to allow before raising a
            :class:`~urllib3.exceptions.MaxRetryError` exception.
    
            Pass ``None`` to retry until you receive a response. Pass a
            :class:`~urllib3.util.retry.Retry` object for fine-grained control
            over different types of retries.
            Pass an integer number to retry connection errors that many times,
            but no other types of errors. Pass zero to never retry.
    
            If ``False``, then retries are disabled and any exception is raised
            immediately. Also, instead of raising a MaxRetryError on redirects,
            the redirect response will be returned.
    
        :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.
    
        :param redirect:
            If True, automatically handle redirects (status codes 301, 302,
            303, 307, 308). Each redirect counts as a retry. Disabling retries
            will disable redirect, too.
    
        :param assert_same_host:
            If ``True``, will make sure that the host of the pool requests is
            consistent else will raise HostChangedError. When False, you can
            use the pool on an HTTP proxy and request foreign hosts.
    
        :param timeout:
            If specified, overrides the default timeout for this one
            request. It may be a float (in seconds) or an instance of
            :class:`urllib3.util.Timeout`.
    
        :param pool_timeout:
            If set and the pool is set to block=True, then this method will
            block for ``pool_timeout`` seconds and raise EmptyPoolError if no
            connection is available within the time period.
    
        :param release_conn:
            If False, then the urlopen call will not release the connection
            back into the pool once a response is received (but will release if
            you read the entire contents of the response such as when
            `preload_content=True`). This is useful if you're not preloading
            the response's content immediately. You will need to call
            ``r.release_conn()`` on the response ``r`` to return the connection
            back into the pool. If None, it takes the value of
            ``response_kw.get('preload_content', True)``.
    
        :param chunked:
            If True, urllib3 will send the body using chunked transfer
            encoding. Otherwise, urllib3 will send the body using the standard
            content-length form. Defaults to False.
    
        :param int body_pos:
            Position to seek to in file-like body in the event of a retry or
            redirect. Typically this won't need to be set because urllib3 will
            auto-populate the value when needed.
    
        :param \\**response_kw:
            Additional parameters are passed to
            :meth:`urllib3.response.HTTPResponse.from_httplib`
        """
        if headers is None:
            headers = self.headers
    
        if not isinstance(retries, Retry):
            retries = Retry.from_int(retries, redirect=redirect, default=self.retries)
    
        if release_conn is None:
            release_conn = response_kw.get("preload_content", True)
    
        # Check host
        if assert_same_host and not self.is_same_host(url):
            raise HostChangedError(self, url, retries)
    
        # Ensure that the URL we're connecting to is properly encoded
        if url.startswith("/"):
            url = six.ensure_str(_encode_target(url))
        else:
            url = six.ensure_str(parse_url(url).url)
    
        conn = None
    
        # Track whether `conn` needs to be released before
        # returning/raising/recursing. Update this variable if necessary, and
        # leave `release_conn` constant throughout the function. That way, if
        # the function recurses, the original value of `release_conn` will be
        # passed down into the recursive call, and its value will be respected.
        #
        # See issue #651 [1] for details.
        #
        # [1] &lt;https://github.com/urllib3/urllib3/issues/651&gt;
        release_this_conn = release_conn
    
        # Merge the proxy headers. Only do this in HTTP. We have to copy the
        # headers dict so we can safely change it without those changes being
        # reflected in anyone else's copy.
        if self.scheme == "http":
            headers = headers.copy()
            headers.update(self.proxy_headers)
    
        # Must keep the exception bound to a separate variable or else Python 3
        # complains about UnboundLocalError.
        err = None
    
        # Keep track of whether we cleanly exited the except block. This
        # ensures we do proper cleanup in finally.
        clean_exit = False
    
        # Rewind body position, if needed. Record current position
        # for future rewinds in the event of a redirect/retry.
        body_pos = set_file_position(body, body_pos)
    
        try:
            # Request a connection from the queue.
            timeout_obj = self._get_timeout(timeout)
            conn = self._get_conn(timeout=pool_timeout)
    
            conn.timeout = timeout_obj.connect_timeout
    
            is_new_proxy_conn = self.proxy is not None and not getattr(
                conn, "sock", None
            )
            if is_new_proxy_conn:
                self._prepare_proxy(conn)
    
            # Make the request on the httplib connection object.
            httplib_response = self._make_request(
                conn,
                method,
                url,
                timeout=timeout_obj,
                body=body,
                headers=headers,
                chunked=chunked,
            )
    
            # If we're going to release the connection in ``finally:``, then
            # the response doesn't need to know about the connection. Otherwise
            # it will also try to release it and we'll have a double-release
            # mess.
            response_conn = conn if not release_conn else None
    
            # Pass method to Response for length checking
            response_kw["request_method"] = method
    
            # Import httplib's response into our own wrapper object
            response = self.ResponseCls.from_httplib(
                httplib_response,
                pool=self,
                connection=response_conn,
                retries=retries,
                **response_kw
            )
    
            # Everything went great!
            clean_exit = True
    
        except queue.Empty:
            # Timed out by queue.
            raise EmptyPoolError(self, "No pool connections are available.")
    
        except (
            TimeoutError,
            HTTPException,
            SocketError,
            ProtocolError,
            BaseSSLError,
            SSLError,
            CertificateError,
        ) as e:
            # Discard the connection for these exceptions. It will be
            # replaced during the next _get_conn() call.
            clean_exit = False
            if isinstance(e, (BaseSSLError, CertificateError)):
                e = SSLError(e)
            elif isinstance(e, (SocketError, NewConnectionError)) and self.proxy:
                e = ProxyError("Cannot connect to proxy.", e)
            elif isinstance(e, (SocketError, HTTPException)):
                e = ProtocolError("Connection aborted.", e)
    
            retries = retries.increment(
&gt;               method, url, error=e, _pool=self, _stacktrace=sys.exc_info()[2]
            )

.venv\lib\site-packages\urllib3\connectionpool.py:725: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = Retry(total=0, connect=None, read=False, redirect=None, status=None)
method = 'GET'
url = '/v10/finance/quoteSummary/ORSTED.CO?modules=balanceSheetHistoryQuarterly'
response = None
error = SSLError(SSLCertVerificationError(1, '[SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: self signed certificate in certificate chain (_ssl.c:1076)'))
_pool = &lt;urllib3.connectionpool.HTTPSConnectionPool object at 0x0000019F261FA688&gt;
_stacktrace = &lt;traceback object at 0x0000019F26202D88&gt;

    def increment(
        self,
        method=None,
        url=None,
        response=None,
        error=None,
        _pool=None,
        _stacktrace=None,
    ):
        """ Return a new Retry object with incremented retry counters.
    
        :param response: A response object, or None, if the server did not
            return a response.
        :type response: :class:`~urllib3.response.HTTPResponse`
        :param Exception error: An error encountered during the request, or
            None if the response was received successfully.
    
        :return: A new ``Retry`` object.
        """
        if self.total is False and error:
            # Disabled, indicate to re-raise the error.
            raise six.reraise(type(error), error, _stacktrace)
    
        total = self.total
        if total is not None:
            total -= 1
    
        connect = self.connect
        read = self.read
        redirect = self.redirect
        status_count = self.status
        cause = "unknown"
        status = None
        redirect_location = None
    
        if error and self._is_connection_error(error):
            # Connect retry?
            if connect is False:
                raise six.reraise(type(error), error, _stacktrace)
            elif connect is not None:
                connect -= 1
    
        elif error and self._is_read_error(error):
            # Read retry?
            if read is False or not self._is_method_retryable(method):
                raise six.reraise(type(error), error, _stacktrace)
            elif read is not None:
                read -= 1
    
        elif response and response.get_redirect_location():
            # Redirect retry?
            if redirect is not None:
                redirect -= 1
            cause = "too many redirects"
            redirect_location = response.get_redirect_location()
            status = response.status
    
        else:
            # Incrementing because of a server error like a 500 in
            # status_forcelist and a the given method is in the whitelist
            cause = ResponseError.GENERIC_ERROR
            if response and response.status:
                if status_count is not None:
                    status_count -= 1
                cause = ResponseError.SPECIFIC_ERROR.format(status_code=response.status)
                status = response.status
    
        history = self.history + (
            RequestHistory(method, url, error, status, redirect_location),
        )
    
        new_retry = self.new(
            total=total,
            connect=connect,
            read=read,
            redirect=redirect,
            status=status_count,
            history=history,
        )
    
        if new_retry.is_exhausted():
&gt;           raise MaxRetryError(_pool, url, error or ResponseError(cause))
E           urllib3.exceptions.MaxRetryError: HTTPSConnectionPool(host='query2.finance.yahoo.com', port=443): Max retries exceeded with url: /v10/finance/quoteSummary/ORSTED.CO?modules=balanceSheetHistoryQuarterly (Caused by SSLError(SSLCertVerificationError(1, '[SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: self signed certificate in certificate chain (_ssl.c:1076)')))

.venv\lib\site-packages\urllib3\util\retry.py:439: MaxRetryError

During handling of the above exception, another exception occurred:

    def test_base__page__data_balance_sheet_quarterly():
        """We have see an error thrown here"""
        base_page = BasePage()
        base_page.symbols = "ORSTED.CO"
        base_page.endpoint = "balance_sheet"
        base_page.frequency = "q"
    
        # assert isinstance(base_page.attr, Ticker.balance_sheet)
        assert not base_page.attr_is_property
    
        base_page._help()
        base_page._code()
&gt;       base_page._data()

tests\package\pages\test_yahooquery_app.py:18: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
.venv\lib\site-packages\param\parameterized.py:351: in _depends
    return func(*args,**kw)
C:\program files\python37\lib\contextlib.py:74: in inner
    return func(*args, **kwds)
application\pages\yahooquery_app\yahooquery_app.py:332: in _data
    self.frequency,
application\pages\yahooquery_app\yahooquery_app.py:123: in get_data
    )(*args)
.venv\lib\site-packages\yahooquery\ticker.py:548: in balance_sheet
    "balanceSheetHistory", "balanceSheetStatements", frequency)
.venv\lib\site-packages\yahooquery\ticker.py:529: in _financials
    return self._to_dataframe(endpoint, data_filter=data_filter)
.venv\lib\site-packages\yahooquery\ticker.py:260: in _to_dataframe
    data = self._get_endpoint(endpoint, params, **kwargs)
.venv\lib\site-packages\yahooquery\ticker.py:242: in _get_endpoint
    json = self.fetch(url, **kwargs)
.venv\lib\site-packages\yahooquery\base.py:105: in fetch
    return self._execute_yahoo_query(url, **kwargs)
.venv\lib\site-packages\yahooquery\base.py:82: in _execute_yahoo_query
    response = self.session.get(url=url, params=self.params)
.venv\lib\site-packages\requests\sessions.py:543: in get
    return self.request('GET', url, **kwargs)
.venv\lib\site-packages\requests\sessions.py:530: in request
    resp = self.send(prep, **send_kwargs)
.venv\lib\site-packages\requests\sessions.py:643: in send
    r = adapter.send(request, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;requests.adapters.HTTPAdapter object at 0x0000019F1E0E3708&gt;
request = &lt;PreparedRequest [GET]&gt;, stream = False
timeout = Timeout(connect=None, read=None, total=None), verify = True
cert = None, proxies = OrderedDict()

    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):
        """Sends PreparedRequest object. Returns Response object.
    
        :param request: The :class:`PreparedRequest &lt;PreparedRequest&gt;` being sent.
        :param stream: (optional) Whether to stream the request content.
        :param timeout: (optional) How long to wait for the server to send
            data before giving up, as a float, or a :ref:`(connect timeout,
            read timeout) &lt;timeouts&gt;` tuple.
        :type timeout: float or tuple or urllib3 Timeout object
        :param verify: (optional) Either a boolean, in which case it controls whether
            we verify the server's TLS certificate, or a string, in which case it
            must be a path to a CA bundle to use
        :param cert: (optional) Any user-provided SSL certificate to be trusted.
        :param proxies: (optional) The proxies dictionary to apply to the request.
        :rtype: requests.Response
        """
    
        try:
            conn = self.get_connection(request.url, proxies)
        except LocationValueError as e:
            raise InvalidURL(e, request=request)
    
        self.cert_verify(conn, request.url, verify, cert)
        url = self.request_url(request, proxies)
        self.add_headers(request, stream=stream, timeout=timeout, verify=verify, cert=cert, proxies=proxies)
    
        chunked = not (request.body is None or 'Content-Length' in request.headers)
    
        if isinstance(timeout, tuple):
            try:
                connect, read = timeout
                timeout = TimeoutSauce(connect=connect, read=read)
            except ValueError as e:
                # this may raise a string formatting error.
                err = ("Invalid timeout {}. Pass a (connect, read) "
                       "timeout tuple, or a single float to set "
                       "both timeouts to the same value".format(timeout))
                raise ValueError(err)
        elif isinstance(timeout, TimeoutSauce):
            pass
        else:
            timeout = TimeoutSauce(connect=timeout, read=timeout)
    
        try:
            if not chunked:
                resp = conn.urlopen(
                    method=request.method,
                    url=url,
                    body=request.body,
                    headers=request.headers,
                    redirect=False,
                    assert_same_host=False,
                    preload_content=False,
                    decode_content=False,
                    retries=self.max_retries,
                    timeout=timeout
                )
    
            # Send the request.
            else:
                if hasattr(conn, 'proxy_pool'):
                    conn = conn.proxy_pool
    
                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)
    
                try:
                    low_conn.putrequest(request.method,
                                        url,
                                        skip_accept_encoding=True)
    
                    for header, value in request.headers.items():
                        low_conn.putheader(header, value)
    
                    low_conn.endheaders()
    
                    for i in request.body:
                        low_conn.send(hex(len(i))[2:].encode('utf-8'))
                        low_conn.send(b'\r\n')
                        low_conn.send(i)
                        low_conn.send(b'\r\n')
                    low_conn.send(b'0\r\n\r\n')
    
                    # Receive the response from the server
                    try:
                        # For Python 2.7, use buffering of HTTP responses
                        r = low_conn.getresponse(buffering=True)
                    except TypeError:
                        # For compatibility with Python 3.3+
                        r = low_conn.getresponse()
    
                    resp = HTTPResponse.from_httplib(
                        r,
                        pool=conn,
                        connection=low_conn,
                        preload_content=False,
                        decode_content=False
                    )
                except:
                    # If we hit any problems here, clean up the connection.
                    # Then, reraise so that we can handle the actual exception.
                    low_conn.close()
                    raise
    
        except (ProtocolError, socket.error) as err:
            raise ConnectionError(err, request=request)
    
        except MaxRetryError as e:
            if isinstance(e.reason, ConnectTimeoutError):
                # TODO: Remove this in 3.0.0: see #2811
                if not isinstance(e.reason, NewConnectionError):
                    raise ConnectTimeout(e, request=request)
    
            if isinstance(e.reason, ResponseError):
                raise RetryError(e, request=request)
    
            if isinstance(e.reason, _ProxyError):
                raise ProxyError(e, request=request)
    
            if isinstance(e.reason, _SSLError):
                # This branch is for urllib3 v1.22 and later.
&gt;               raise SSLError(e, request=request)
E               requests.exceptions.SSLError: HTTPSConnectionPool(host='query2.finance.yahoo.com', port=443): Max retries exceeded with url: /v10/finance/quoteSummary/ORSTED.CO?modules=balanceSheetHistoryQuarterly (Caused by SSLError(SSLCertVerificationError(1, '[SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: self signed certificate in certificate chain (_ssl.c:1076)')))

.venv\lib\site-packages\requests\adapters.py:514: SSLError</failure></testcase><testcase classname="tests.package.pages.training_analysis.models.test_athlete" file="tests\package\pages\training_analysis\models\test_athlete.py" line="5" name="test_constructor" time="0.003" /><testcase classname="tests.package.pages.training_analysis.models.test_performance_curve" file="tests\package\pages\training_analysis\models\test_performance_curve.py" line="6" name="test_constructor" time="0.001" /><testcase classname="tests.package.pages.training_analysis.plots.test_activity_plots" file="tests\package\pages\training_analysis\plots\test_activity_plots.py" line="7" name="test_activity_data_plots_none" time="0.002" /><testcase classname="tests.package.pages.training_analysis.plots.test_activity_plots" file="tests\package\pages\training_analysis\plots\test_activity_plots.py" line="12" name="test_activity_data_plots_empty" time="0.001" /><testcase classname="tests.package.pages.training_analysis.plots.test_activity_plots" file="tests\package\pages\training_analysis\plots\test_activity_plots.py" line="17" name="test_map_plot_none" time="0.001" /><testcase classname="tests.package.pages.training_analysis.plots.test_activity_plots" file="tests\package\pages\training_analysis\plots\test_activity_plots.py" line="22" name="test_map_plot_empty" time="0.001" /><testcase classname="tests.package.pages.training_analysis.services.test_fit_file_service" file="tests\package\pages\training_analysis\services\test_fit_file_service.py" line="11" name="test__convert_units" time="0.023" /><testcase classname="tests.package.pages.training_analysis.services.test_fit_file_service" file="tests\package\pages\training_analysis\services\test_fit_file_service.py" line="43" name="test_parse_fit_file" time="0.926" /><testcase classname="tests.package.pages.training_analysis.views.test_activity_view" file="tests\package\pages\training_analysis\views\test_activity_view.py" line="9" name="test_activity_view" time="0.007" /><testcase classname="tests.package.pages.training_analysis.views.test_athlete_view" file="tests\package\pages\training_analysis\views\test_athlete_view.py" line="9" name="test_athlete_edit_view" time="0.007" /><testcase classname="tests.package.pages.training_analysis.views.test_performance_curve_view" file="tests\package\pages\training_analysis\views\test_performance_curve_view.py" line="11" name="test_performance_curve_update_view" time="0.054" /><testcase classname="package.tests.test_bootstrap_dashboard" file="package\tests\test_bootstrap_dashboard.py" line="5" name="test_app_attributes" time="0.014" /><testcase classname="package.tests.test_bootstrap_dashboard" file="package\tests\test_bootstrap_dashboard.py" line="36" name="test_app_with_content" time="0.017" /><testcase classname="package.tests.test_browserurl" file="package\tests\test_browserurl.py" line="21" name="test_url" time="0.003" /><testcase classname="package.tests.test_browserurl" file="package\tests\test_browserurl.py" line="34" name="test_pn_url" time="0.008" /><testcase classname="package.tests.test_dataframe" file="package\tests\test_dataframe.py" line="6" name="test_get_default_formatters" time="0.003" /><testcase classname="package.tests.test_dataframe" file="package\tests\test_dataframe.py" line="56" name="test_get_default_formatters_multi_level_index" time="0.007" /><testcase classname="package.tests.test_fontawesome" file="package\tests\test_fontawesome.py" line="10" name="test_get_fontawesome_panel_express_css" time="0.107"><failure message="urllib.error.HTTPError: HTTP Error 403: Forbidden">def test_get_fontawesome_panel_express_css():
        "Test that get_fontawesome_panel_express can return a text string without error"
        # When
&gt;       actual = fontawesome.fontawesome.get_fontawesome_panel_express()

package\tests\test_fontawesome.py:14: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
package\awesome_panel\express\fontawesome\fontawesome.py:66: in get_fontawesome_panel_express
    with urllib.request.urlopen(FONTAWESOME_CSS_URL) as file:
C:\program files\python37\lib\urllib\request.py:222: in urlopen
    return opener.open(url, data, timeout)
C:\program files\python37\lib\urllib\request.py:531: in open
    response = meth(req, response)
C:\program files\python37\lib\urllib\request.py:641: in http_response
    'http', request, response, code, msg, hdrs)
C:\program files\python37\lib\urllib\request.py:569: in error
    return self._call_chain(*args)
C:\program files\python37\lib\urllib\request.py:503: in _call_chain
    result = func(*args)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;urllib.request.HTTPDefaultErrorHandler object at 0x0000019F1790EDC8&gt;
req = &lt;urllib.request.Request object at 0x0000019F1DFF5848&gt;
fp = &lt;http.client.HTTPResponse object at 0x0000019F1E113CC8&gt;, code = 403
msg = 'Forbidden', hdrs = &lt;http.client.HTTPMessage object at 0x0000019F1E017188&gt;

    def http_error_default(self, req, fp, code, msg, hdrs):
&gt;       raise HTTPError(req.full_url, code, msg, hdrs, fp)
E       urllib.error.HTTPError: HTTP Error 403: Forbidden

C:\program files\python37\lib\urllib\request.py:649: HTTPError</failure></testcase><testcase classname="package.tests.test_fontawesome" file="package\tests\test_fontawesome.py" line="26" name="test__to_fontawesome_panel_express_css[.fa-bus:before{content:&quot;\\f207&quot;}.fa-bus-alt:before{content:&quot;\\f55e&quot;}-div.bk.pa-bus div.bk *::before{content:&quot;\\f207&quot;}\ndiv.bk.pa-bus-alt div.bk *::before{content:&quot;\\f55e&quot;}]" time="0.001" /><testcase classname="package.tests.test_navigation" file="package\tests\test_navigation.py" line="6" name="test_pn_navigation_button" time="0.003" /><testcase classname="package.tests.test_navigation" file="package\tests\test_navigation.py" line="47" name="test_pn_navigation" time="0.004" /><testcase classname="package.tests.test_navigation" file="package\tests\test_navigation.py" line="83" name="test_pn_navigation_with_font_awesome" time="0.004" /><testcase classname="package.tests.test_progress_ext" file="package\tests\test_progress_ext.py" line="17" name="test_constructor" time="0.001" /><testcase classname="package.tests.test_progress_ext" file="package\tests\test_progress_ext.py" line="31" name="test_update" time="0.001" /><testcase classname="package.tests.test_progress_ext" file="package\tests\test_progress_ext.py" line="45" name="test_reset" time="0.001" /><testcase classname="package.tests.test_pydeck" file="package\tests\test_pydeck.py" line="7" name="test__repr_html" time="0.004" /><testcase classname="package.tests.test_pydeck" file="package\tests\test_pydeck.py" line="37" name="test__repr_html_none" time="0.001" /><testcase classname="package.tests.test_share_link" file="package\tests\test_share_link.py" line="5" name="test_base" time="0.001" /><testcase classname="package.tests.test_share_link" file="package\tests\test_share_link.py" line="31" name="test_facebook" time="0.001" /><testcase classname="package.tests.test_share_link" file="package\tests\test_share_link.py" line="50" name="test_linked_in" time="0.001" /><testcase classname="package.tests.test_share_link" file="package\tests\test_share_link.py" line="70" name="test_twitter" time="0.001" /><testcase classname="package.tests.test_share_link" file="package\tests\test_share_link.py" line="79" name="test_reddit" time="0.001" /><testcase classname="package.tests.application.components.test_application_component" file="package\tests\application\components\test_application_component.py" line="5" name="test_can_construct" time="0.031" /><testcase classname="package.tests.application.components.test_loading_page_component" file="package\tests\application\components\test_loading_page_component.py" line="6" name="test_can_construct_loading_page_component" time="0.004" /><testcase classname="package.tests.application.components.test_loading_page_component" file="package\tests\application\components\test_loading_page_component.py" line="12" name="test_can_show" time="0.005" /><testcase classname="package.tests.application.components.test_page_component" file="package\tests\application\components\test_page_component.py" line="7" name="test_can_construct_page_component" time="0.001" /><testcase classname="package.tests.application.components.test_page_component" file="package\tests\application\components\test_page_component.py" line="16" name="test_can_create_page_component_from_page_component" time="0.001" /><testcase classname="package.tests.application.components.test_page_component" file="package\tests\application\components\test_page_component.py" line="23" name="test_can_create_page_component_from_page_component_subclass" time="0.001" /><testcase classname="package.tests.application.components.test_page_component" file="package\tests\application\components\test_page_component.py" line="35" name="test_can_create_page_component_from_instance_of_page_component_subclass" time="0.001" /><testcase classname="package.tests.application.components.test_page_component" file="package\tests\application\components\test_page_component.py" line="47" name="test_can_create_page_component_from_callable" time="0.001" /><testcase classname="package.tests.application.components.test_page_component" file="package\tests\application\components\test_page_component.py" line="60" name="test_can_create_page_component_from_class_with_view_func" time="0.001" /><testcase classname="package.tests.application.components.test_page_component" file="package\tests\application\components\test_page_component.py" line="75" name="test_can_create_page_component_from_instance_with_view_func" time="0.001" /><testcase classname="package.tests.application.components.test_page_component" file="package\tests\application\components\test_page_component.py" line="90" name="test_can_create_page_component_from_reactive" time="0.002" /><testcase classname="package.tests.application.components.test_page_component" file="package\tests\application\components\test_page_component.py" line="99" name="test_can_create_page_component_from_string" time="0.001" /><testcase classname="package.tests.application.components.test_page_component" file="package\tests\application\components\test_page_component.py" line="108" name="test_can_create_page_component_from_class_with_main_and_sidebar" time="0.001" /><testcase classname="package.tests.application.components.test_page_component" file="package\tests\application\components\test_page_component.py" line="128" name="test_can_create_page_component_from_instance_with_main_and_sidebar" time="0.001" /><testcase classname="package.tests.application.components.test_page_navigation_component" file="package\tests\application\components\test_page_navigation_component.py" line="5" name="test_can_construct" time="0.008" /><testcase classname="package.tests.application.components.test_page_navigation_component" file="package\tests\application\components\test_page_navigation_component.py" line="10" name="test_can_show" time="0.008" /><testcase classname="package.tests.application.components.test_progress_spinner" file="package\tests\application\components\test_progress_spinner.py" line="5" name="test_can_construct" time="0.003" /><testcase classname="package.tests.application.components.test_progress_spinner" file="package\tests\application\components\test_progress_spinner.py" line="14" name="test_can_spin" time="0.006" /><testcase classname="package.tests.application.components.test_progress_spinner" file="package\tests\application\components\test_progress_spinner.py" line="24" name="test_can_convert_spinner_url_to_img_html" time="0.003" /><testcase classname="package.tests.application.models.test_application" file="package\tests\application\models\test_application.py" line="6" name="test_can_construct_application" time="0.005" /><testcase classname="package.tests.application.models.test_author" file="package\tests\application\models\test_author.py" line="2" name="test_can_construct_author" time="0.001" /><testcase classname="package.tests.application.models.test_page" file="package\tests\application\models\test_page.py" line="5" name="test_can_construct_page" time="0.001" /><testcase classname="package.tests.application.models.test_progress" file="package\tests\application\models\test_progress.py" line="5" name="test_can_construct" time="0.001" /><testcase classname="package.tests.application.models.test_progress" file="package\tests\application\models\test_progress.py" line="13" name="test_active_works" time="0.001" /><testcase classname="package.tests.application.models.test_resource" file="package\tests\application\models\test_resource.py" line="2" name="test_can_construct_resource" time="0.001" /><testcase classname="package.tests.application.models.test_tag" file="package\tests\application\models\test_tag.py" line="2" name="test_can_construct_tag" time="0.001" /><testcase classname="package.tests.application.models.test_theme" file="package\tests\application\models\test_theme.py" line="6" name="test_can_construct" time="0.001" /><testcase classname="package.tests.application.services.test_author_service" file="package\tests\application\services\test_author_service.py" line="12" name="test_can_construct_author_service" time="0.002" /><testcase classname="package.tests.application.services.test_author_service" file="package\tests\application\services\test_author_service.py" line="20" name="test_can_create_author" time="0.001" /><testcase classname="package.tests.application.services.test_author_service" file="package\tests\application\services\test_author_service.py" line="29" name="test_can_read_author_by_name" time="0.001" /><testcase classname="package.tests.application.services.test_author_service" file="package\tests\application\services\test_author_service.py" line="39" name="test_can_delete_author" time="0.001" /><testcase classname="package.tests.application.services.test_author_service" file="package\tests\application\services\test_author_service.py" line="47" name="test_can_bulk_create_and_is_sorted" time="0.001" /><testcase classname="package.tests.application.services.test_page_service" file="package\tests\application\services\test_page_service.py" line="7" name="test_can_construct_page_service" time="0.004" /><testcase classname="package.tests.application.services.test_page_service" file="package\tests\application\services\test_page_service.py" line="12" name="test_can_create_page" time="0.001" /><testcase classname="package.tests.application.services.test_page_service" file="package\tests\application\services\test_page_service.py" line="21" name="test_can_read_page_by_name" time="0.003" /><testcase classname="package.tests.application.services.test_page_service" file="package\tests\application\services\test_page_service.py" line="31" name="test_can_delete_page" time="0.003" /><testcase classname="package.tests.application.services.test_page_service" file="package\tests\application\services\test_page_service.py" line="39" name="test_can_bulk_create_and_is_sorted" time="0.002" /><testcase classname="package.tests.application.services.test_page_service" file="package\tests\application\services\test_page_service.py" line="54" name="test_can_load_default_page" time="0.004" /><testcase classname="package.tests.application.services.test_progress_service" file="package\tests\application\services\test_progress_service.py" line="20" name="test_can_be_constructed_with_default_values" time="0.001" /><testcase classname="package.tests.application.services.test_progress_service" file="package\tests\application\services\test_progress_service.py" line="25" name="test_can_be_constructed_with_custom_values" time="0.001" /><testcase classname="package.tests.application.services.test_progress_service" file="package\tests\application\services\test_progress_service.py" line="33" name="test_can_update" time="0.001" /><testcase classname="package.tests.application.services.test_progress_service" file="package\tests\application\services\test_progress_service.py" line="44" name="test_can_reset" time="0.001" /><testcase classname="package.tests.application.services.test_progress_service" file="package\tests\application\services\test_progress_service.py" line="54" name="test_can_use_report_func_as_context_manager" time="0.001" /><testcase classname="package.tests.application.services.test_progress_service" file="package\tests\application\services\test_progress_service.py" line="67" name="test_can_use_report_func_as_decorator" time="0.001" /><testcase classname="package.tests.application.services.test_progress_service" file="package\tests\application\services\test_progress_service.py" line="79" name="test_can_use_increment_func_as_context_manager" time="0.001" /><testcase classname="package.tests.application.services.test_progress_service" file="package\tests\application\services\test_progress_service.py" line="97" name="test_can_use_increment_func_as_decorator" time="0.001" /><testcase classname="package.tests.application.services.test_progress_service" file="package\tests\application\services\test_progress_service.py" line="113" name="test_can_use_active_count" time="0.001" /><testcase classname="package.tests.application.services.test_progress_service" file="package\tests\application\services\test_progress_service.py" line="135" name="test_can_update_value_only" time="0.001" /><testcase classname="package.tests.application.services.test_progress_service" file="package\tests\application\services\test_progress_service.py" line="151" name="test_can_update_value_max_only" time="0.001" /><testcase classname="package.tests.application.services.test_progress_service" file="package\tests\application\services\test_progress_service.py" line="167" name="test_can_update_message_only" time="0.001" /><testcase classname="package.tests.application.services.test_progress_service" file="package\tests\application\services\test_progress_service.py" line="183" name="test_can_update_active_count_only" time="0.001" /><testcase classname="package.tests.application.services.test_services" file="package\tests\application\services\test_services.py" line="11" name="test_can_construct" time="0.001" /><testcase classname="package.tests.application.services.test_services" file="package\tests\application\services\test_services.py" line="20" name="test_can_construct_fixture" time="0.009" /><testcase classname="package.tests.application.services.test_tag_service" file="package\tests\application\services\test_tag_service.py" line="12" name="test_can_construct_tag_service" time="0.002" /><testcase classname="package.tests.application.services.test_tag_service" file="package\tests\application\services\test_tag_service.py" line="16" name="test_can_create_tag" time="0.002" /><testcase classname="package.tests.application.services.test_tag_service" file="package\tests\application\services\test_tag_service.py" line="25" name="test_can_read_tag_by_name" time="0.001" /><testcase classname="package.tests.application.services.test_tag_service" file="package\tests\application\services\test_tag_service.py" line="35" name="test_can_delete_tag" time="0.004" /><testcase classname="package.tests.application.services.test_tag_service" file="package\tests\application\services\test_tag_service.py" line="43" name="test_can_bulk_create_and_is_sorted" time="0.006" /><testcase classname="package.tests.application.templates.test_application_template" file="package\tests\application\templates\test_application_template.py" line="6" name="test_can_construct_application_template_with_exception" time="0.036" /><testcase classname="package.tests.application.templates.test_application_template" file="package\tests\application\templates\test_application_template.py" line="16" name="test_main_content_changes_when_page_changes" time="0.029" /><testcase classname="package.tests.application.templates.test_material" file="package\tests\application\templates\test_material.py" line="5" name="test_can_construct_template" time="0.037" /><testcase classname="package.tests.application.utils.test_order_by_name" file="package\tests\application\utils\test_order_by_name.py" line="10" name="test_can_order" time="0.002" /><testcase classname="package.tests.application.views.test_application_view" file="package\tests\application\views\test_application_view.py" line="6" name="test_can_construct" time="0.027" /><testcase classname="package.tests.core.test_app" file="package\tests\core\test_app.py" line="6" name="test_title_awesome" time="0.003" /><testcase classname="package.tests.core.test_services" file="package\tests\core\test_services.py" line="4" name="test_module_to_github_url" time="0.001" /><testcase classname="package.tests.designer.test_designer" file="package\tests\designer\test_designer.py" line="10" name="test_can_construct_fixture" time="0.034" /><testcase classname="package.tests.designer.test_designer" file="package\tests\designer\test_designer.py" line="19" name="test_has_view" time="0.029" /><testcase classname="package.tests.designer.test_designer" file="package\tests\designer\test_designer.py" line="23" name="test_has_component_pane" time="0.031" /><testcase classname="package.tests.designer.test_designer" file="package\tests\designer\test_designer.py" line="27" name="test_has_designer_pane" time="0.030" /><testcase classname="package.tests.designer.test_designer" file="package\tests\designer\test_designer.py" line="31" name="test_has_action_pane" time="0.031" /><testcase classname="package.tests.designer.test_designer" file="package\tests\designer\test_designer.py" line="35" name="test_has_settings_pane" time="0.031" /><testcase classname="package.tests.designer.test_designer" file="package\tests\designer\test_designer.py" line="39" name="test_has_css_pane" time="0.033" /><testcase classname="package.tests.designer.test_designer" file="package\tests\designer\test_designer.py" line="43" name="test_has_js_pane" time="0.031" /><testcase classname="package.tests.designer.test_designer" file="package\tests\designer\test_designer.py" line="47" name="test_has_error_pane" time="0.030" /><testcase classname="package.tests.designer.test_designer_show" file="package\tests\designer\test_designer_show.py" line="73" name="test_designer" time="0.156" /><testcase classname="package.tests.designer.components.test_title_component" file="package\tests\designer\components\test_title_component.py" line="11" name="test_constructor" time="0.004" /><testcase classname="package.tests.designer.services.test_reload_service" file="package\tests\designer\services\test_reload_service.py" line="11" name="test_can_construct_fixture" time="0.002" /><testcase classname="package.tests.designer.services.test_reload_service" file="package\tests\designer\services\test_reload_service.py" line="15" name="test_can_reload_component" time="0.004" /><testcase classname="package.tests.designer.services.test_reload_service" file="package\tests\designer\services\test_reload_service.py" line="27" name="test_can_reload_reactive_component" time="0.003" /><testcase classname="package.tests.designer.services.test_reload_service" file="package\tests\designer\services\test_reload_service.py" line="40" name="test_can_reload_css_file" time="0.002" /><testcase classname="package.tests.designer.services.test_reload_service" file="package\tests\designer\services\test_reload_service.py" line="49" name="test_can_reload_js_file" time="0.002" /><testcase classname="package.tests.designer.services.test_reload_service" file="package\tests\designer\services\test_reload_service.py" line="58" name="test_can_communicate_reloading_progress" time="0.001" /><testcase classname="package.tests.designer.services.test_reload_service" file="package\tests\designer\services\test_reload_service.py" line="62" name="test_can_handle_reload_error" time="0.003" /><testcase classname="application.pages.awesome_panel_express_tests.test_bootstrap_alerts" file="application\pages\awesome_panel_express_tests\test_bootstrap_alerts.py" line="24" name="test_info_alert" time="0.002" /><testcase classname="application.pages.awesome_panel_express_tests.test_bootstrap_alerts" file="application\pages\awesome_panel_express_tests\test_bootstrap_alerts.py" line="39" name="test_warning_alert" time="0.002" /><testcase classname="application.pages.awesome_panel_express_tests.test_bootstrap_alerts" file="application\pages\awesome_panel_express_tests\test_bootstrap_alerts.py" line="53" name="test_error_alert" time="0.002" /><testcase classname="application.pages.awesome_panel_express_tests.test_bootstrap_card" file="application\pages\awesome_panel_express_tests\test_bootstrap_card.py" line="45" name="test_card" time="0.005" /><testcase classname="application.pages.awesome_panel_express_tests.test_bootstrap_card" file="application\pages\awesome_panel_express_tests\test_bootstrap_card.py" line="61" name="test_card_fixed_width" time="0.004" /><testcase classname="application.pages.awesome_panel_express_tests.test_bootstrap_card" file="application\pages\awesome_panel_express_tests\test_bootstrap_card.py" line="150" name="test_card_with_plot" time="0.028" /><testcase classname="application.pages.awesome_panel_express_tests.test_bootstrap_card" file="application\pages\awesome_panel_express_tests\test_bootstrap_card.py" line="169" name="test_card_with_multiple_panels" time="0.053" /><testcase classname="application.pages.awesome_panel_express_tests.test_bootstrap_card" file="application\pages\awesome_panel_express_tests\test_bootstrap_card.py" line="193" name="test_card_collapsible" time="0.028" /><testcase classname="application.pages.awesome_panel_express_tests.test_bootstrap_card" file="application\pages\awesome_panel_express_tests\test_bootstrap_card.py" line="214" name="test_card_with_code" time="0.003" /><testcase classname="application.pages.awesome_panel_express_tests.test_code" file="application\pages\awesome_panel_express_tests\test_code.py" line="29" name="test_code" time="0.002" /><testcase classname="application.pages.awesome_panel_express_tests.test_dataframe" file="application\pages\awesome_panel_express_tests\test_dataframe.py" line="33" name="test_get_default_formatters" time="0.005" /><testcase classname="application.pages.awesome_panel_express_tests.test_modal" file="application\pages\awesome_panel_express_tests\test_modal.py" line="38" name="test_modal" time="0.002" /><testcase classname="application.pages.awesome_panel_express_tests.test_modal" file="application\pages\awesome_panel_express_tests\test_modal.py" line="47" name="test_modal_settings" time="0.006" /><testcase classname="application.pages.awesome_panel_express_tests.test_progress_ext" file="application\pages\awesome_panel_express_tests\test_progress_ext.py" line="56" name="test_view_value_and_message" time="0.003" /><testcase classname="application.pages.awesome_panel_express_tests.test_progress_ext" file="application\pages\awesome_panel_express_tests\test_progress_ext.py" line="73" name="test_view_message_only" time="0.003" /><testcase classname="application.pages.awesome_panel_express_tests.test_progress_ext" file="application\pages\awesome_panel_express_tests\test_progress_ext.py" line="90" name="test_view_value_only" time="0.002" /><testcase classname="application.pages.awesome_panel_express_tests.test_progress_ext" file="application\pages\awesome_panel_express_tests\test_progress_ext.py" line="106" name="test_view_none" time="0.003" /><testcase classname="application.pages.awesome_panel_express_tests.test_progress_ext" file="application\pages\awesome_panel_express_tests\test_progress_ext.py" line="122" name="test_bar_color" time="0.002" /><testcase classname="application.pages.awesome_panel_express_tests.test_progress_ext" file="application\pages\awesome_panel_express_tests\test_progress_ext.py" line="140" name="test_report_as_context_manager" time="0.005" /><testcase classname="application.pages.awesome_panel_express_tests.test_progress_ext" file="application\pages\awesome_panel_express_tests\test_progress_ext.py" line="165" name="test_report_as_decorator" time="0.005" /><testcase classname="application.pages.awesome_panel_express_tests.test_progress_ext" file="application\pages\awesome_panel_express_tests\test_progress_ext.py" line="190" name="test_increment_as_context_manager" time="0.004" /><testcase classname="application.pages.awesome_panel_express_tests.test_progress_ext" file="application\pages\awesome_panel_express_tests\test_progress_ext.py" line="215" name="test_increment_as_decorator" time="0.006" /></testsuite></testsuites>